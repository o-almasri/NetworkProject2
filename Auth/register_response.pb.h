// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_register_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_register_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_5fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_5fresponse_2eproto;
namespace auth {
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
}  // namespace auth
PROTOBUF_NAMESPACE_OPEN
template<> ::auth::RegisterResponse* Arena::CreateMaybeMessage<::auth::RegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auth {

enum RegisterResponse_eRegisterResultType : int {
  RegisterResponse_eRegisterResultType_SUCCESS = 0,
  RegisterResponse_eRegisterResultType_ACCOUNT_ALREADY_EXISTS = 1,
  RegisterResponse_eRegisterResultType_INVALID_PASSWORD = 2,
  RegisterResponse_eRegisterResultType_INTERNAL_SERVER_ERROR = 3
};
bool RegisterResponse_eRegisterResultType_IsValid(int value);
constexpr RegisterResponse_eRegisterResultType RegisterResponse_eRegisterResultType_eRegisterResultType_MIN = RegisterResponse_eRegisterResultType_SUCCESS;
constexpr RegisterResponse_eRegisterResultType RegisterResponse_eRegisterResultType_eRegisterResultType_MAX = RegisterResponse_eRegisterResultType_INTERNAL_SERVER_ERROR;
constexpr int RegisterResponse_eRegisterResultType_eRegisterResultType_ARRAYSIZE = RegisterResponse_eRegisterResultType_eRegisterResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterResponse_eRegisterResultType_descriptor();
template<typename T>
inline const std::string& RegisterResponse_eRegisterResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterResponse_eRegisterResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterResponse_eRegisterResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterResponse_eRegisterResultType_descriptor(), enum_t_value);
}
inline bool RegisterResponse_eRegisterResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterResponse_eRegisterResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterResponse_eRegisterResultType>(
    RegisterResponse_eRegisterResultType_descriptor(), name, value);
}
// ===================================================================

class RegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  explicit constexpr RegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return new RegisterResponse();
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterResponse_eRegisterResultType eRegisterResultType;
  static constexpr eRegisterResultType SUCCESS =
    RegisterResponse_eRegisterResultType_SUCCESS;
  static constexpr eRegisterResultType ACCOUNT_ALREADY_EXISTS =
    RegisterResponse_eRegisterResultType_ACCOUNT_ALREADY_EXISTS;
  static constexpr eRegisterResultType INVALID_PASSWORD =
    RegisterResponse_eRegisterResultType_INVALID_PASSWORD;
  static constexpr eRegisterResultType INTERNAL_SERVER_ERROR =
    RegisterResponse_eRegisterResultType_INTERNAL_SERVER_ERROR;
  static inline bool eRegisterResultType_IsValid(int value) {
    return RegisterResponse_eRegisterResultType_IsValid(value);
  }
  static constexpr eRegisterResultType eRegisterResultType_MIN =
    RegisterResponse_eRegisterResultType_eRegisterResultType_MIN;
  static constexpr eRegisterResultType eRegisterResultType_MAX =
    RegisterResponse_eRegisterResultType_eRegisterResultType_MAX;
  static constexpr int eRegisterResultType_ARRAYSIZE =
    RegisterResponse_eRegisterResultType_eRegisterResultType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eRegisterResultType_descriptor() {
    return RegisterResponse_eRegisterResultType_descriptor();
  }
  template<typename T>
  static inline const std::string& eRegisterResultType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eRegisterResultType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eRegisterResultType_Name.");
    return RegisterResponse_eRegisterResultType_Name(enum_t_value);
  }
  static inline bool eRegisterResultType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eRegisterResultType* value) {
    return RegisterResponse_eRegisterResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .auth.RegisterResponse.eRegisterResultType result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::auth::RegisterResponse_eRegisterResultType result() const;
  void set_result(::auth::RegisterResponse_eRegisterResultType value);
  private:
  ::auth::RegisterResponse_eRegisterResultType _internal_result() const;
  void _internal_set_result(::auth::RegisterResponse_eRegisterResultType value);
  public:

  // @@protoc_insertion_point(class_scope:auth.RegisterResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  int result_;
  friend struct ::TableStruct_register_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterResponse

// required int32 requestId = 1;
inline bool RegisterResponse::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterResponse::has_requestid() const {
  return _internal_has_requestid();
}
inline void RegisterResponse::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::requestid() const {
  // @@protoc_insertion_point(field_get:auth.RegisterResponse.requestId)
  return _internal_requestid();
}
inline void RegisterResponse::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void RegisterResponse::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.RegisterResponse.requestId)
}

// required int32 userId = 2;
inline bool RegisterResponse::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterResponse::has_userid() const {
  return _internal_has_userid();
}
inline void RegisterResponse::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::userid() const {
  // @@protoc_insertion_point(field_get:auth.RegisterResponse.userId)
  return _internal_userid();
}
inline void RegisterResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void RegisterResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:auth.RegisterResponse.userId)
}

// required .auth.RegisterResponse.eRegisterResultType result = 3;
inline bool RegisterResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegisterResponse::has_result() const {
  return _internal_has_result();
}
inline void RegisterResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::auth::RegisterResponse_eRegisterResultType RegisterResponse::_internal_result() const {
  return static_cast< ::auth::RegisterResponse_eRegisterResultType >(result_);
}
inline ::auth::RegisterResponse_eRegisterResultType RegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:auth.RegisterResponse.result)
  return _internal_result();
}
inline void RegisterResponse::_internal_set_result(::auth::RegisterResponse_eRegisterResultType value) {
  assert(::auth::RegisterResponse_eRegisterResultType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void RegisterResponse::set_result(::auth::RegisterResponse_eRegisterResultType value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:auth.RegisterResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::auth::RegisterResponse_eRegisterResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::RegisterResponse_eRegisterResultType>() {
  return ::auth::RegisterResponse_eRegisterResultType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_register_5fresponse_2eproto
